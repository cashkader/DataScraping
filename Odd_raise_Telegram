#! python3

from selenium import webdriver
import time, schedule, requests

options = webdriver.ChromeOptions()
options.add_experimental_option('excludeSwitches', ['enable-logging'])
driver = webdriver.Chrome(executable_path=r'C:\Users\Markos\MyPythonScripts\chromedriver.exe', options=options)
telegram_token = '1734884604:AAFMO2RwpjKEiwroHiLEaa00NdEzOsK2ZgA'
telegram_chat_id = '-1001155462245'

match_url = input('Oddsportal url: ')
pick = input('Pick: ')
odd = input ('Odd: ')
pick_d = dict([('1', 0),('X', 1),('2', 2)])

driver.get(match_url)

def send_message(msg):
    #For payload params refer: https://core.telegram.org/bots/api#sendmessage
    payload = {
        'chat_id': telegram_chat_id,
        'text': msg,
        'parse_mode': 'HTML'
    }
    return requests.post('https://api.telegram.org/bot{token}/sendMessage'.format(token=telegram_token), data=payload).content

def fi(xpath):
    try:
        driver.find_element_by_css_selector(xpath).text
    except:
        return False
    
def ffi(xpath):
    if fi(xpath) != False:
        return driver.find_element_by_css_selector(xpath).text
    
def bookies(i):
    return ffi('#odds-data-table > div:nth-child(1) > table > tbody > tr:nth-child('+str(i)+') > td:nth-child(1) > div > a.name')

def odds(i,j):
    return ffi('#odds-data-table > div:nth-child(1) > table > tbody > tr:nth-child('+str(i)+') > td:nth-child('+str(j)+') > a')

game = driver.find_element_by_xpath('//*[@id="col-content"]/h1').text

terminate = False
def Notify():
    driver.refresh()
    odds_table = {}
    for i in range (1,50):
        if bookies(i) is not None:
            odd_list = []
            for j in range (2,5):                
                odd_list.append(odds(i,j))
            odds_table.update({bookies(i):odd_list})
        else:
            break
    if 'Pinnacle' in odds_table and float(odds_table['Pinnacle'][pick_d[pick]]) >= float(odd):
        send_message(game + '\nPick: ' + str(pick) + ' , Odd: ' + str(odds_table['Pinnacle'][pick_d[pick]]))
        global terminate
        terminate = True
        
schedule.every(30).seconds.do(Notify)

while not terminate:
    schedule.run_pending()
    time.sleep(1)
